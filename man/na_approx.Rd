% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/na_method.R
\name{na_approx}
\alias{na_approx}
\alias{na_locf}
\alias{na_overall_mean}
\alias{na_overall_median}
\alias{na_overall_mode}
\alias{na_spline}
\alias{na_weekly_mean}
\alias{na_zero}
\alias{na_plot}
\title{Replace \code{NA} by interpolation}
\usage{
na_approx(x, index, fill_na_tips = TRUE)

na_locf(x, fill_na_tips = TRUE)

na_overall_mean(x)

na_overall_median(x)

na_overall_mode(x)

na_spline(x, index)

na_weekly_mean(x, index, fill_na_tips = TRUE, week_start = 1)

na_zero(x)

na_plot(x, index, intp = NULL, print = TRUE)
}
\arguments{
\item{x}{A \code{\link[=numeric]{numeric}} object.}

\item{index}{An R object with the same length of \code{x} representing the index
of a time series.}

\item{fill_na_tips}{(optional) a \code{\link[=logical]{logical}} value indicating if
the function must fill remaining \code{NA} values with the closest non-missing
data point. Learn more about it in the Details section (default: \code{TRUE}).}

\item{week_start}{(optional) an integer number indicating the day on which
the week starts (\code{1} for Monday and \code{7} for \code{Sunday}) (default: \code{1}).}

\item{intp}{(optional) a \code{\link[=numeric]{numeric}} object with the same length
of \code{x} and with the output of the \code{NA} interpolation of \code{x} (default:
\code{NULL}).}

\item{print}{(optional) a \code{\link[=logical]{logical}} value indicating if the
function must print the plot (default: \code{TRUE}).}
}
\value{
\itemize{
\item For \verb{na_*}: a \code{\link[=numeric]{numeric}} object with the same length of \code{x}.
\item For \code{na_plot()}: a \code{\link[ggplot2:ggplot]{ggplot}} object with a point and
line chart showing the original data versus the interpolated data.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\code{actverse} provides several functions to interpolate your data in an easy
manner. These functions can be found with the prefix \code{na_}. See the
Methods section to learn more about each one.

\code{na_plot()} creates a plot showing the shape of the interpolation. It helps
to visualize and find the best interpolation technique for your data.
}
\details{
\subsection{Interpolation in actigraphy}{

There are few articles that deals with interpolation in actigraphy. Tonon et
al. (2022) recommends not using interpolation (i.e., maintain \code{NA} values)
whenever is possible. The same authors also recommends using the weekly mean
method of interpolation when the parameters cannot be computed in the
presence of \code{NA} values.
}

\subsection{\code{fill_na_tips} argument}{

Some interpolation methods can result in outputs with remaining \code{NA} values.
That's the case, for example, with the linear interpolation method
(\code{na_approx()}).
\itemize{
\item Example:
}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{x <- c(NA, 1, 5, 10, NA, 5, 10, 1, NA, 10, 1, 5, NA, NA)
index <- seq(as.Date("2020-01-01"), as.Date("2020-01-14"), by = "day")

na_approx(x, index, fill_na_tips = FALSE)
#>  [1]   NA  1.0  5.0 10.0  7.5  5.0 10.0  1.0  5.5 10.0  1.0  5.0   NA   NA
}\if{html}{\out{</div>}}

\cr
By using \code{fill_na_gaps == TRUE} (default), the function will fill those gaps
with the closest non-missing data point.
\cr
\itemize{
\item Example:
}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{na_approx(x, index, fill_na_tips = TRUE)
#>  [1]  1.0  1.0  5.0 10.0  7.5  5.0 10.0  1.0  5.5 10.0  1.0  5.0  5.0  5.0
}\if{html}{\out{</div>}}
}
}
\section{Methods}{

\subsection{\code{na_approx()}: Linear interpolation}{

As the name suggests, this method creates a "bridge" between the gaps found
in \code{x}. Learn more about it in \code{\link[zoo:na.approx]{zoo::na.approx()}} and \code{\link[stats:approxfun]{stats::approx()}}.
\itemize{
\item Visual example:
\cr\figure{na-approx-example-1.png}
}
}

\subsection{\code{na_locf()}: Last observation carried forward}{

\cr
This method replaces \code{NA} values with the preceding observation of the \code{NA}
block.
\itemize{
\item Visual example:
\cr\figure{na-locf-example-1.png}
}
}

\subsection{\code{na_overall_mean()}: Overall mean}{

This method replaces \code{NA} values with the overall mean of \code{x}.
\itemize{
\item Visual example:
\cr\figure{na-overall-mean-example-1.png}
}
}

\subsection{\code{na_overall_median()}: Overall median}{

This method replaces \code{NA} values with the overall median of \code{x}.
\itemize{
\item Visual example:
\cr\figure{na-overall-median-example-1.png}
}
}

\subsection{\code{na_overall_mode()}: Overall mode}{

This method replaces \code{NA} values with the most frequent value (mode) of
\code{x}.

If no mode can be found, the function will return \code{x} without any
interpolation. \code{na_overall_mode()} will show a warning message to inform the
user if that happen.
\itemize{
\item Visual example:
\cr\figure{na-overall-mode-example-1.png}
}
}

\subsection{\code{na_spline()}: Cubic spline interpolation}{

This method uses low-degree polynomials in each of the intervals, and chooses
the polynomial pieces such that they fit smoothly together. It can produce
extreme values when dealing with large gaps.

Learn more about the spline method in the \href{https://en.wikipedia.org/wiki/Spline_interpolation}{spline interpolation Wikipedia page}. See also:
\code{\link[stats:splinefun]{stats::spline()}} and \code{\link[zoo:na.approx]{zoo::na.spline()}}.
\itemize{
\item Visual example:
\cr\figure{na-spline-example-1.png}
}
}

\subsection{\code{na_weekly_mean()}: Weekly mean}{

This method replaces \code{NA} values with the weekly mean of \code{x}. For datasets
with only one week in the \code{index} the result will be the same as
\code{na_overall_mean()}.
\itemize{
\item Visual example:
\cr\figure{na-weekly-mean-example-1.png}
}
}

\subsection{\code{na_zero()}: Replace \code{NA} with \code{0}s}{

This method replaces \code{NA} values with \code{0}s.
\itemize{
\item Visual example:
\cr\figure{na-zero-example-1.png}
}
}
}

\examples{
x <- c(NA, 1, 5, 10, NA, 5, 10, 1, NA, 10, 1, 5, NA, NA)
index <- seq(as.Date("2020-01-01"), as.Date("2020-01-14"), by = "day")

x
#> [1] NA  1  5 10 NA  5 10  1 NA 10  1  5 NA NA # Expected
na_plot(x, index)

## 'na_approx()': Linear interpolation

na_approx(x, index, fill_na_tips = FALSE)
#> [1]   NA  1.0  5.0 10.0  7.5  5.0 10.0  1.0  5.5 10.0
#> [11] 1.0  5.0  NA   NA # Expected
na_plot(x, index, na_approx(x, index, fill_na_tips = FALSE))

na_approx(x, index, fill_na_tips = TRUE)
#> [1]   1.0  1.0  5.0 10.0  7.5  5.0 10.0  1.0  5.5 10.0
#> [11] 1.0  5.0  5.0  5.0 # Expected
na_plot(x, index, na_approx(x, index, fill_na_tips = TRUE))

## 'na_locf()': Last observation carried forward

na_locf(x, fill_na_tips = FALSE)
#> [1] NA  1  5 10 10  5 10  1  1 10  1  5  5  5 # Expected
na_plot(x, index, na_locf(x, fill_na_tips = FALSE))

na_locf(x, fill_na_tips = TRUE)
#> [1]  1  1  5 10 10  5 10  1  1 10  1  5  5  5 # Expected
na_plot(x, index, na_locf(x, fill_na_tips = TRUE))

## 'na_overall_mean()': Overall mean

na_overall_mean(x)
#> [1]  5.333333  1.000000  5.000000 10.000000  5.333333  5.000000 10.000000
#> [8] 1.000000 5.333333 10.000000  1.000000  5.000000  5.333333
#> [14] 5.333333 # Expected
mean(x, na.rm = TRUE)
#> [1] 5.333333 # Expected
na_plot(x, index, na_overall_mean(x))

## 'na_overall_median()': Overall median

na_overall_median(x)
#> [1]  5  1  5 10  5  5 10  1  5 10  1  5  5  5 # Expected
stats::median(x, na.rm = TRUE)
#> [1] 5 # Expected
na_plot(x, index, na_overall_median(x))

## 'na_overall_mode()': Overall mode

na_overall_mode(x)
#> ! No mode was found. x was not interpolated.
#> [1] NA  1  5 10 NA  5 10  1 NA 10  1  5 NA NA # Expected

x2 <- append(x, 1)
index2 <- append(index, as.Date("2020-01-15"))

na_overall_mode(x2)
#> [1]  1  1  5 10  1  5 10  1  1 10  1  5  1  1  1 # Expected
na_plot(x2, index2, na_overall_mode(x2))

## 'na_spline()': Cubic spline interpolation

na_spline(x, index)
#> [1]  4.567728   1.000000   5.000000  10.000000   6.589146   5.000000
#> [7]  10.000000  1.000000   5.037198  10.000000   1.000000   5.000000
#> [13] 42.905390 131.216171
na_plot(x, index, na_spline(x, index))

## 'na_weekly_mean()': Weekly mean

na_weekly_mean(x, index, fill_na_tips = FALSE)
#> [1]  5.333333  1.000000  5.000000 10.000000  5.333333  5.000000 10.000000
#> [8] 1.000000 5.333333 10.000000  1.000000  5.000000  NA  NA # Expected
na_plot(x, index, na_weekly_mean(x, index, fill_na_tips = FALSE))

na_weekly_mean(x, index, fill_na_tips = TRUE)
#> [1]  5.333333  1.000000  5.000000 10.000000  5.333333  5.000000 10.000000
#> [8] 1.000000 5.333333 10.000000  1.000000  5.000000  5.000000
#> [14] 5.000000 # Expected
na_plot(x, index, na_weekly_mean(x, index, fill_na_tips = TRUE))

## 'na_zero()': Replace 'NA' with '0's

na_zero(x)
#> [1]  0  1  5 10  0  5 10  1  0 10  1  5  0  0 # Expected
na_plot(x, index, na_zero(x))
}
\references{
Tonon, A. C. et al. (2022). Handling missing data in rest-activity
time series measured by actimetry. \emph{Chronobiology International}.
\doi{10.1080/07420528.2022.2051714}.
}
\concept{interpolation functions}
