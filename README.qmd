# actverse <a href = "https://danielvartan.github.io/brandr/"><img src = "man/figures/logo.svg" align="right" width="120" /></a>

<!-- quarto render -->

```{r}
#| label: setup
#| include: false

library(actverse)
library(dplyr)

source(here::here("R", ".setup.R"))
```

<!-- badges: start -->
[![Project Status: Active - The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)
[![R-CMD-check.yaml](https://github.com/danielvartan/actverse/actions/workflows/check-standard.yaml/badge.svg)](https://github.com/danielvartan/actverse/actions/workflows/check-standard.yaml)
[![Codecov test coverage](https://codecov.io/gh/danielvartan/actverse/branch/main/graph/badge.svg)](https://app.codecov.io/gh/danielvartan/actverse?branch=main)
[![License: MIT](https://img.shields.io/badge/license-MIT-green)](https://choosealicense.com/licenses/mit/)
[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](CODE_OF_CONDUCT.md)
<!-- badges: end -->

## Overview

`actverse` is an R package that offers a comprehensive toolkit for processing, analyzing, and visualizing actigraphy data. It is designed to support sleep and chronobiology researchers by streamlining workflows and enhancing reproducibility in actigraphy research.

The package is built on [tidyverse principles](https://tidyverse.tidyverse.org/articles/manifesto.html) and integrates seamlessly with the [tidyverse ecosystem](https://www.tidyverse.org/), ensuring a consistent and user-friendly experience for data manipulation and analysis.

> If you find this project useful, please consider giving it a star! &nbsp; [![GitHub repo stars](https://img.shields.io/github/stars/danielvartan/actverse)](https://github.com/danielvartan/actverse/)

## Installation

You can install `actverse` using the [`remotes`](https://github.com/r-lib/remotes) package:

```r
remotes::install_github("danielvartan/actverse")
```

## Usage

The R ecosystem offers a [wide variety](https://cran.r-project.org/view=TimeSeries) of time series standards, and selecting the right one was an important decision in developing `actverse`. A consistent standard for time objects is essential, as [time can be represented in many ways](https://youtu.be/eelVqfm8vVc) and may be based on different numerical systems. For packages that follow [tidyverse principles](https://tidyverse.tidyverse.org/articles/manifesto.html), we believe the [`tsibble`](https://tsibble.tidyverts.org/index.html) package provides the best time series standard. As its name suggests, `tsibble` extends the [tidyverse](https://www.tidyverse.org/) [`tibble`](https://tibble.tidyverse.org/) object for time series data.

Most `actverse` functions require your data to be in the [`tsibble`](https://tsibble.tidyverts.org/index.html) format. Converting your data is straightforward and can significantly improve your experience working with time series in R. Please refer to the [`tsibble`](https://tsibble.tidyverts.org/index.html) documentation for guidance on adapting your data.

### Read/Write

* `read_acttrust()`: Read, tidy, and validate an [ActTrust](https://condorinst.com/en/) file.
* `write_acttrust()`: Write a `tsibble` to a readable [ActTrust](https://condorinst.com/en/) file.

Example:

```{r}
#| message: false
#| warning: false

file <- get_from_zenodo(
  doi = "10.5281/zenodo.4898822",
  dir = tempdir(),
  file = "processed.txt"
)
```

```{r}
#| message: false
#| warning: false

data <- file |> read_acttrust(tz = "America/Sao_Paulo")
```

```{r}
#| message: false
#| warning: false

library(dplyr)

data |> glimpse()
```

### Period Functions

- [`periodogram()`](https://danielvartan.github.io/actverse/reference/periodogram.html): Compute Sokolove & Bushell's $\chi^{2}$ periodogram.
- [`spectrogram()`](https://danielvartan.github.io/actverse/reference/spectrogram.html): Create a spectrogram plot based on Sokolove & Bushell's $\chi^{2}$ periodogram.

Example:

```{r}
#| label: readme-periodogram
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 6

data |> periodogram("pim")
```

```{r}
#| label: readme-spectrogram
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 6

data |> spectrogram("pim")
```

### Data Visualization

We strongly recommend using the [`ragg`](https://ragg.r-lib.org/) package as your backend graphics device for complex data visualizations. It is faster and produces higher quality images than R default graphics device.

- [`actogram()`](https://danielvartan.github.io/actverse/reference/actogram.html): Create an actogram plot from actigraphy data.

```{r}
#| label: readme-actogram
#| message: false
#| warning: false
#| fig-width: 12
#| fig-height: 12

data |>
  actogram(
    col = "pim",
    days = -1,
    latitude = -23.55065,
    longitude = -46.63338,
    double_plot = TRUE
  )
```

### Data Interpolation

- [`na_approx()`](https://danielvartan.github.io/actverse/reference/na_approx.html) `na_locf()` `na_overall_mean()` `na_overall_median()` `na_overall_mode()` `na_spline()` `na_weekly_mean()` `na_zero()` `na_plot()`: Interpolate missing values in a numeric vector.

Example:

```{r}
#| message: false
#| warning: false

x <- c(NA, 1, 5, 10, NA, 5, 10, 1, NA, 10, 1, 5, NA, NA)
index <- seq(as.Date("2020-01-01"), as.Date("2020-01-14"), by = "day")

na_approx(x, index, fill_na_tips = TRUE)
```

```{r}
#| label: readme-na-approx
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 6

na_plot(x, index, na_approx(x, index, fill_na_tips = TRUE))
```

### API Clients

* [`get_from_zenodo()`](https://danielvartan.github.io/actverse/reference/get_from_zenodo.html): Get data from a Zenodo record.
* [`get_sun_stats()`](https://danielvartan.github.io/actverse/reference/get_sun_stats.html): Get sun related statistics from different APIs.

Example:

```{r}
#| message: false
#| warning: false

library(rutils) # github.com/danielvartan/rutils

get_sun_stats(
  latitude = -23.5489,
  longitude = -46.6388,
  tz = "America/Sao_Paulo"
) |>
  rutils:::list_as_tibble() |>
  print(n = Inf)
```

### Other Features

`actverse` also comes with many utility functions and provides actigraphy datasets for testing and learning purposes.

All functions are thoroughly documented, with detailed explanations of the underlying methodologies and computational guidelines. For a complete list of available functions and their documentation, click [here](https://danielvartan.github.io/actverse/).

Example:

```{r}
#| message: false
#| warning: false

file |>
  read_acttrust(regularize = FALSE) |>
  find_epoch()
```

## How to Cite

```{r}
citation("actverse")
```

## License

[![License: MIT](https://img.shields.io/badge/License-MIT-10D810.svg)](https://choosealicense.com/licenses/mit/)

`actverse` code is released under the [MIT license](https://opensource.org/license/mit). This means you can use, modify, and distribute the code freely, as long as you include the original license and copyright notice in any copies or substantial portions of the software.

## Contributing

[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](https://www.contributor-covenant.org/version/2/1/code_of_conduct/)

Contributions are welcome, including bug reports. Take a moment to review our [Guidelines for Contributing](https://danielvartan.github.io/actverse/CONTRIBUTING.html).

[![Github Sponsor](man/figures/sponsor-badge.svg)](https://github.com/sponsors/danielvartan)

Become an `actverse` sponsor!

Click [here](https://github.com/sponsors/danielvartan) to make a donation. Please indicate the `actverse` package in your donation message.